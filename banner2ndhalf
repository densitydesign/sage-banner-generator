var enlarge = function() {
        open=true;
        $( "#bnr-interactive" ).animate({
            height: 320
        }, 1000, function() {
            $( "#bnr-interactive .enlarge").hide();
            $( "#bnr-interactive .shrink").show();
            force.alpha(0.2);

        });

        $(".bnr-container").animate({
            left: -320
        },  1000)

        $( "#bnr-interactive svg" ).animate({
            top:0,
            right:0
        }, 1000, function() {
            svg.selectAll("circle").transition().duration(500).style("fill-opacity",0.7)
            svg.selectAll("text").transition().duration(500).style("opacity",0.7)
        });
    }


    var shrink = function() {

        deselect();
        open=false;
        $( "#bnr-interactive" ).animate({
            height: 90
        }, 1000, function() {
            $( "#bnr-interactive .enlarge").show();
            $( "#bnr-interactive .shrink").hide();
            force.alpha(0.2);
        });

        $(".bnr-container").animate({
            left: 0
        },  1000)

        $( "#bnr-interactive svg" ).animate({
            top:-120,
            right:-200
        }, 1000, function() {
            svg.selectAll("circle").transition().duration(500).style("fill-opacity",0)
            svg.selectAll("text").transition().duration(500).style("opacity",0)
        });
    }

    var toggle = function() {
        console.log("toggle",open);
        if(open) shrink();
        else enlarge();


    }

    var select = function(d) {
        if(open) {
            d.sel = true;
            d3.event.stopPropagation();

            txts.attr("x", function (e) {
                if (e.size > 1) return Math.sqrt(e.size / Math.PI) * 8 + 3;
                else return 10000;
            })
                    .attr("y", function (e) {
                        if (e.size > 1) return 0;
                        else return 10000;
                    })
                    .style("opacity", 0.7)


            link.style("opacity", 0.1);
            node.style("opacity", 0.1);


            var sel = link.filter(function (e) {
                return e.source.name === d.name || e.target.name === d.name;
            }).style("opacity", 1);

            sel.each(function (e) {

                node.filter(function (f) {
                    return f.name === e.source.name || f.name === e.target.name;
                })
                        .style("opacity", 1)
                        .select("text")
                        .attr("x", function(e){return Math.sqrt(e.size / Math.PI) * 8 + 3})
                        .attr("y", 0)
                        .style("opacity", 1);

            })
        }
    };

    var deselect = function() {
        if(open) {
            node.selectAll("circle").each(function (d) {
                d.sel = false;
            })
            node.style("opacity", 1);
            link.style("opacity", 1);
            txts.attr("x", function (e) {
                if (e.size > 2) return Math.sqrt(e.size / Math.PI) * 8 + 3;
                else return 10000;
            })
                    .attr("y", function (e) {
                        if (e.size > 2) return 0;
                        else return 10000;
                    })
                    .style("opacity", 0.7);
        }

    };


    var width = 728,
            height = 320;

    var link, node, txts;

    var force = d3.layout.force()
            .charge(-110)
            .gravity(0.2)
            .linkStrength(1)
            .chargeDistance(200)
            .friction(0.65)
            .linkDistance(function(d){

                return 100 - (d.value*10);
            })
        //.friction(0.9)
        //.chargeDistance(100)
            .size([width, height]);

    var svg = d3.select("#bnr-interactive").append("svg")
            .attr("width", width)
            .attr("height", height)



        graph.nodes.forEach(function(d){
            d.x = Math.random()*width/3+(width*2/3);
            d.y =Math.random()*height/3;
        })

        graph.links.forEach(function(d){
            d.source = graph.nodes.filter(function(e){return e.name == d.source})[0];
            d.target = graph.nodes.filter(function(e){return e.name == d.target})[0];
        })

        force
                .nodes(graph.nodes)
                .links(graph.links)
                .start();


        link = svg.selectAll(".link")
                .data(graph.links)
                .enter().append("line")
                .attr("class", "link")
                .style("stroke", '#ffffaa')
                .style("stroke-width", function(d) { return d.value; })
                .style("stroke-opacity", function(d) { return d.value/5 });

// define the nodes
        node = svg.selectAll(".node")
                .data(graph.nodes)
                .enter().append("g")
                .attr("class", "node")
                .on("click",deselect)
                .call(force.drag);

// add the nodes
        node.append("circle")
                .style("fill-opacity",0)
                .attr("r", function(d) { return Math.sqrt(d.size/Math.PI)*8; })
                .on("mouseover",function(d){
                    txts.filter(function(e){return e.name===d.name})
                            .attr("x", function(e){return Math.sqrt(e.size/Math.PI)*8+3})
                            .attr("y", 0)
                })
                .on("mouseout",function(d){
                    if(!d.sel) {
                        txts.filter(function (e) {
                            return e.name === d.name
                        })
                                .attr("x", function (e) {
                                    if (e.size > 2) return Math.sqrt(e.size/Math.PI)*8+3;
                                    else return -10000;
                                })
                                .attr("y", function (e) {
                                    if (e.size > 2) return 0;
                                    else return -10000;
                                })
                    }
                })
                .on("click",select);

// add the text
        txts=node.append("text")
                .attr("x", function(e){
                    if(e.size>2) return Math.sqrt(e.size/Math.PI)*8+3;
                    else return 10000;
                })
                .attr("y", function(e){
                    if(e.size>2) return 0;
                    else return 10000;
                })
                .style("opacity",0)
                .style("fill","white")
                .text(function(d) { return d.name; });


        force.on("tick", function() {

            node
                .attr("transform", function(d) {
                    return "translate(" + d.x + "," + d.y + ")"; });


            d3.selectAll(".link").attr("x1", function(d) { return d.source.x; })
                    .attr("y1", function(d) { return d.source.y; })
                    .attr("x2", function(d) { return d.target.x; })
                    .attr("y2", function(d) { return d.target.y; });
        });





    $("#bnr-interactive").on("click","svg",deselect);

</script>
</body>